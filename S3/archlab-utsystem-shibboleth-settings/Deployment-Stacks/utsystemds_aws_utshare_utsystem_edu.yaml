Parameters:
  SKAvailabilityZones:
    Description: >-
      Select Two Availibity Zone to use in the Region of deployment.  If more
      than two are selected only the first two will be used.
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
  SKVPCCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.100.24.0/21
    Description: CIDR block for the VPC
    Type: String
  SKAZ1PubCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.100.24.0/24
    Description: CIDR block for Public subnet located in Availability Zone 1
    Type: String
  SKAZ1PrivCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.100.25.0/24
    Description: CIDR block for Private subnet located in Availability Zone 1
    Type: String
  SKAZ2PubCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.100.26.0/24
    Description: CIDR block for Public subnet located in Availability Zone 2
    Type: String
  SKAZ2PrivCIDR:
    AllowedPattern: >-
      ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.100.27.0/24
    Description: CIDR block for Private subnet located in Availability Zone 2
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Availability Zone Selection
        Parameters:
          - SKAvailabilityZones
      - Label:
          default: Virtual Private Cloud
        Parameters:
          - SKVPCCIDR
      - Label:
          default: Availability Zone 1
        Parameters:
          - SKAZ1PubCIDR
          - SKAZ1PrivCIDR
      - Label:
          default: Availability Zone 2
        Parameters:
          - SKAZ2PubCIDR
          - SKAZ2PrivCIDR
      - Label:
          default: Instance Selections
        Parameters:
          - KeyName
          - InstanceType
    ParameterLabels:
      SKAvailabilityZones:
        default: Availability Zones
      SKVPCCIDR:
        default: Virtual Private Cloud CIDR Block
      SKAZ1PubCIDR:
        default: Public Subnet CIDR Block for Availability Zone 1
      SKAZ1PrivCIDR:
        default: Private Subnet CIDR Block for Availability Zone 1
      SKAZ2PubCIDR:
        default: Public Subnet CIDR Block for Availability Zone 2
      SKAZ2PrivCIDR:
        default: Private Subnet CIDR Block for Availability Zone 2
      KeyName:
        default: EC2 KeyPair for SSH access
      InstanceType:
        default: Instance Type
      SSHLocation:
        default: SSH Location CIDR
  'AWS::CloudFormation::Designer':
    a741f4b4-d4d0-4dbb-aa38-96e6c1a8c14a:
      size:
        width: 60
        height: 60
      position:
        x: 530
        'y': 150
      z: 1
      embeds: []
    87a0c341-a89b-461d-bdf1-a345b1af826c:
      size:
        width: 60
        height: 60
      position:
        x: 650
        'y': 40
      z: 1
      embeds: []
      isassociatedwith:
        - eeb911ba-239d-4fc5-b8b3-2714a53cb983
    32b67050-3638-4fe7-826a-88bf7c809d81:
      size:
        width: 60
        height: 60
      position:
        x: 530
        'y': 40
      z: 1
      embeds: []
    eeb911ba-239d-4fc5-b8b3-2714a53cb983:
      size:
        width: 60
        height: 60
      position:
        x: 650
        'y': 150
      z: 1
      embeds: []
      isassociatedwith:
        - 884dc4d3-3219-4d77-8c7d-68ca7542518a
    884dc4d3-3219-4d77-8c7d-68ca7542518a:
      size:
        width: 60
        height: 60
      position:
        x: 650
        'y': 270
      z: 1
      embeds: []
    e8b8d2e6-f578-42b9-afa1-f7b1fb3b1449:
      size:
        width: 60
        height: 60
      position:
        x: 530
        'y': 270
      z: 1
      embeds: []
    ff1eadf4-5c69-4ac0-ae40-34061e60ee11:
      size:
        width: 60
        height: 60
      position:
        x: 410
        'y': 270
      z: 1
      embeds: []
      isassociatedwith:
        - e8b8d2e6-f578-42b9-afa1-f7b1fb3b1449
    bdbf6ae5-6ed4-4fe4-8870-1363e451c5b9:
      size:
        width: 60
        height: 60
      position:
        x: 410
        'y': 150
      z: 1
      embeds: []
      isassociatedwith:
        - ff1eadf4-5c69-4ac0-ae40-34061e60ee11
        - 32b67050-3638-4fe7-826a-88bf7c809d81
    a3eb3604-ca69-48e2-8b2e-3207a716d6c8:
      size:
        width: 60
        height: 60
      position:
        x: 770
        'y': 150
      z: 1
      embeds: []
    03acd0de-af80-4ee0-9756-f944eb63bde2:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 150
      z: 1
      embeds: []
    72d1872e-35b3-432f-821a-f703866a9778:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 270
      z: 1
      embeds: []
      isassociatedwith:
        - 03acd0de-af80-4ee0-9756-f944eb63bde2
    631dc08b-eaf7-44ea-bf8e-3879f6a90a0d:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 50
      z: 1
      embeds: []
      isassociatedwith:
        - 03acd0de-af80-4ee0-9756-f944eb63bde2
Resources:
  2AZNetwork:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: >-
        https://utsystem-shibboleth-settings.s3-us-west-1.amazonaws.com/Deployment-Stacks/Multi-AZ-Network.yaml
      Parameters:
        AvailabilityZones: !Join 
          - ','
          - !Ref SKAvailabilityZones
        VPCCIDR: !Ref SKVPCCIDR
        AZ1PrivCIDR: !Ref SKAZ1PrivCIDR
        AZ1PubCIDR: !Ref SKAZ1PubCIDR
        AZ2PrivCIDR: !Ref SKAZ2PrivCIDR
        AZ2PubCIDR: !Ref SKAZ2PubCIDR
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-2AZNetwork'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a741f4b4-d4d0-4dbb-aa38-96e6c1a8c14a
  ELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
        - CertificateArn: >-
            arn:aws:acm:us-west-1:548863021208:certificate/b76cf84c-534d-4e31-89c6-e85f55862104
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ELBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: '443'
      Protocol: HTTPS
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 87a0c341-a89b-461d-bdf1-a345b1af826c
  ELBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !GetAtt 2AZNetwork.Outputs.vpc2az4sn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 32b67050-3638-4fe7-826a-88bf7c809d81
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !GetAtt 2AZNetwork.Outputs.PublicSubnetAZ1
        - !GetAtt 2AZNetwork.Outputs.PublicSubnetAZ2
      SecurityGroups:
        - !Ref ELBSecurityGroup
    Metadata:
      'AWS::CloudFormation::Designer':
        id: eeb911ba-239d-4fc5-b8b3-2714a53cb983
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTPS access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      VpcId: !GetAtt 2AZNetwork.Outputs.vpc2az4sn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 884dc4d3-3219-4d77-8c7d-68ca7542518a
  WAYFWebGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !GetAtt 2AZNetwork.Outputs.ApplicationSubnetAZ1
        - !GetAtt 2AZNetwork.Outputs.ApplicationSubnetAZ2
      MinSize: '2'
      MaxSize: '6'
      TargetGroupARNs:
        - !Ref ELBTargetGroup
      LaunchConfigurationName: !Ref ASGLaunchConfig
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT10M
        WaitOnResourceSignals: 'true'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: bdbf6ae5-6ed4-4fe4-8870-1363e451c5b9
  ASGLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - CreateRepos
            - Install
        CreateRepos:
          files:
            /etc/yum.repos.d/shibboleth-security.repo:
              content: !Join 
                - ''
                - - |
                    [security_shibboleth]
                  - >
                    # If the mirrors stop working, change download to
                    downloadcontent...
                  - |
                    name=Shibboleth (CentOS_7)
                  - |
                    type=rpm-md
                  - >
                    baseurl=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_7/
                  - |
                    gpgcheck=1
                  - >
                    gpgkey=http://download.opensuse.org/repositories/security:/shibboleth/CentOS_7/repodata/repomd.xml.key
                  - |
                    enabled=1
              mode: '000644'
              owner: root
              group: root
            /tmp/config_shibboleth.sh:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - |
                    # Download and Unzip WWW Files
                  - >
                    aws s3 cp
                    s3://utsystem-shibboleth-settings/utsystem-config/utsystem-wayf-html.zip
                    /tmp/
                  - |
                    sudo unzip -o /tmp/utsystem-wayf-html.zip -d /etc/shibboleth-ds/
                  - |
                    sudo chown apache:apache /etc/shibboleth-ds/*.css
                  - |
                    sudo chown apache:apache /etc/shibboleth-ds/*.svg
                  - |
                    sudo chown apache:apache /etc/shibboleth-ds/idpselect.js
                  - |
                    sudo chown apache:apache /etc/shibboleth-ds/*.html    
                  - |
                    #
                  - |
                    # Download Configuration Files from S3 Bucket
                  - >
                    aws s3 cp
                    s3://utsystem-shibboleth-settings/utsystem-config/shibboleth-sp-certs.zip
                    /tmp/
                  - |
                    sudo rm /etc/shibboleth/shibboleth2.xml
                  - >
                    aws s3 cp
                    s3://utsystem-shibboleth-settings/utsystem-config/shibboleth2.xml
                    /etc/shibboleth/
                  - |
                    sudo rm /etc/shibboleth-ds/idpselect_config.js
                  - >
                    aws s3 cp
                    s3://utsystem-shibboleth-settings/utsystem-config/idpselect_config.js
                    /etc/shibboleth-ds/
                  - |
                    sudo rm /etc/httpd/conf.d/shibboleth-ds.conf
                  - >
                    aws s3 cp
                    s3://utsystem-shibboleth-settings/utsystem-config/shibboleth-ds.conf
                    /etc/httpd/conf.d/
                  - |
                    #
                  - |
                  - >
                    # Unzip Shibboleth Certificate Files into Shibboleth
                    Settings 
                  - |
                    sudo rm /etc/shibboleth/*.pem
                  - >
                    sudo unzip -P
                    '7^!Y2bsS5Fm727Z#j5E47HRgey3O*uub5LebH@R@YlUQ%'
                    /tmp/shibboleth-sp-certs.zip -d /etc/shibboleth/
                  - |
                    sudo chown shibd:shibd /etc/shibboleth/*.pem
                  - |
                    sudo chmod 600 /etc/shibboleth/*.key.pem
                  - |
                    sudo chmod 644 /etc/shibboleth/*.cert.pem
                  - |
                    # Restart HTTPD and Shibboleth
                  - |
                    sudo systemctl restart httpd
                  - |
                    sudo systemctl restart shibd
                  - |
                    # Cleanup
                  - |
                    sudo rm /tmp/utsystem-wayf-html.zip
                  - |
                    sudo rm /tmp/shibboleth-sp-certs.zip
              mode: '000755'
              owner: root
              group: root
        Install:
          packages:
            yum:
              httpd: []
              mod_ssl: []
              php: []
              shibboleth:
                - 3.0.4-3.2
              shibboleth-embedded-ds:
                - 1.2.2-3.1
          files:
            /var/www/html/index.html:
              content: !Join 
                - ''
                - - |
                    <html>
                  - |2
                      <head>
                  - |2
                        <meta http-equiv="Refresh" content="0; url=https://www.utsystem.edu" />
                  - |2
                      </head>
                  - |2
                      <body>
                  - |2
                      </body>
                  - |
                    </html>
              mode: '000600'
              owner: apache
              group: apache
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource WebServerInstance '
                  - '         --configsets InstallAndRun '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

                  - |
                    runas=root
              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
          commands:
            ConfigShibboleth:
              command: /tmp/config_shibboleth.sh
      'AWS::CloudFormation::Designer':
        id: ff1eadf4-5c69-4ac0-ae40-34061e60ee11
    Properties:
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2IAMInstanceProfile
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum update -y
            - |
              # Install the files and packages from the metadata
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource ASGLaunchConfig '
            - '         --configsets InstallAndRun '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - |
              # Signal the status from cfn-init
            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WAYFWebGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - ''
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on the configured port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SKAZ1PubCIDR
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SKAZ2PubCIDR
      VpcId: !GetAtt 2AZNetwork.Outputs.vpc2az4sn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: e8b8d2e6-f578-42b9-afa1-f7b1fb3b1449
  DNSELBCNAME:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneName: aws.utshare.utsystem.edu.
      Name: utsystemds.aws.utshare.utsystem.edu.
      Type: CNAME
      TTL: 900
      ResourceRecords:
        - !GetAtt ApplicationLoadBalancer.DNSName
    Metadata:
      'AWS::CloudFormation::Designer':
        id: a3eb3604-ca69-48e2-8b2e-3207a716d6c8
    DependsOn:
      - ApplicationLoadBalancer
  UTSystemHostS3Access:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: UTSystem-Host-S3-Access
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: 'sts:AssumeRole'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 03acd0de-af80-4ee0-9756-f944eb63bde2
  UTSystemWAYFS3ReadAccess:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: UTSystem-WAYF-S3-ReadAccess
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:GetBucketTagging'
              - 's3:GetObjectVersionTagging'
              - 's3:GetObjectTagging'
              - 's3:ListBucket'
              - 's3:GetObjectVersion'
            Resource:
              - 'arn:aws:s3:::utsystem-shibboleth-settings/*'
              - 'arn:aws:s3:::utsystem-shibboleth-settings'
      Roles:
        - !Ref UTSystemHostS3Access
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 631dc08b-eaf7-44ea-bf8e-3879f6a90a0d
  EC2IAMInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: UTSystem-Shibboleth-Profile
      Roles:
        - !Ref UTSystemHostS3Access
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 72d1872e-35b3-432f-821a-f703866a9778
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSInstanceType2NATArch:
    t1.micro:
      Arch: NATHVM64
    t2.nano:
      Arch: NATHVM64
    t2.micro:
      Arch: NATHVM64
    t2.small:
      Arch: NATHVM64
    t2.medium:
      Arch: NATHVM64
    t2.large:
      Arch: NATHVM64
    m1.small:
      Arch: NATHVM64
    m1.medium:
      Arch: NATHVM64
    m1.large:
      Arch: NATHVM64
    m1.xlarge:
      Arch: NATHVM64
    m2.xlarge:
      Arch: NATHVM64
    m2.2xlarge:
      Arch: NATHVM64
    m2.4xlarge:
      Arch: NATHVM64
    m3.medium:
      Arch: NATHVM64
    m3.large:
      Arch: NATHVM64
    m3.xlarge:
      Arch: NATHVM64
    m3.2xlarge:
      Arch: NATHVM64
    m4.large:
      Arch: NATHVM64
    m4.xlarge:
      Arch: NATHVM64
    m4.2xlarge:
      Arch: NATHVM64
    m4.4xlarge:
      Arch: NATHVM64
    m4.10xlarge:
      Arch: NATHVM64
    c1.medium:
      Arch: NATHVM64
    c1.xlarge:
      Arch: NATHVM64
    c3.large:
      Arch: NATHVM64
    c3.xlarge:
      Arch: NATHVM64
    c3.2xlarge:
      Arch: NATHVM64
    c3.4xlarge:
      Arch: NATHVM64
    c3.8xlarge:
      Arch: NATHVM64
    c4.large:
      Arch: NATHVM64
    c4.xlarge:
      Arch: NATHVM64
    c4.2xlarge:
      Arch: NATHVM64
    c4.4xlarge:
      Arch: NATHVM64
    c4.8xlarge:
      Arch: NATHVM64
    g2.2xlarge:
      Arch: NATHVMG2
    g2.8xlarge:
      Arch: NATHVMG2
    r3.large:
      Arch: NATHVM64
    r3.xlarge:
      Arch: NATHVM64
    r3.2xlarge:
      Arch: NATHVM64
    r3.4xlarge:
      Arch: NATHVM64
    r3.8xlarge:
      Arch: NATHVM64
    i2.xlarge:
      Arch: NATHVM64
    i2.2xlarge:
      Arch: NATHVM64
    i2.4xlarge:
      Arch: NATHVM64
    i2.8xlarge:
      Arch: NATHVM64
    d2.xlarge:
      Arch: NATHVM64
    d2.2xlarge:
      Arch: NATHVM64
    d2.4xlarge:
      Arch: NATHVM64
    d2.8xlarge:
      Arch: NATHVM64
    hi1.4xlarge:
      Arch: NATHVM64
    hs1.8xlarge:
      Arch: NATHVM64
    cr1.8xlarge:
      Arch: NATHVM64
    cc2.8xlarge:
      Arch: NATHVM64
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0b898040803850657
      HVMG2: ami-0ad82a384c06c911e
    us-west-2:
      HVM64: ami-082b5a644766e0e6f
      HVMG2: ami-006fd2260be98254c
    us-west-1:
      HVM64: ami-056ee704806822732
      HVMG2: NOT_SUPPORTED
    us-east-2:
      HVM64: ami-0d8f6eb4f641ef691
      HVMG2: ami-0f378490dca16e3f4
Outputs:
  SiteURL:
    Description: Hosted Site URL
    Value: !Sub '${AWS::StackName}'
    Export:
      Name: StackName
